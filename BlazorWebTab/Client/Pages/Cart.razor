@page "/Cart"
@using BlazorWebTab.Shared.DTOs
@inject ICartService CartService

<PageTitle>Shopping cart</PageTitle>
@if (CartProducts.Count == 0)
{
    <span><h3>@message</h3></span>
}
else
{
    <div>
        <div><h2>Shopping cart:</h2></div>
       

        @foreach (var product in CartProducts)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image"/>
                </div>
                <div class="name">
                    <a href="product/@product.ProductId">@product.Title</a>
                    <h5><span>@product.ProductType</span></h5>
                    <h4><span class="price">@product.Price</span></h4>
                    
                    <input type="number" value="@product.Quantity"
                           @onchange="@((ChangeEventArgs e) => UpdateQuantity(e, product))"
                           class="form-control input-quantity"
                           min="1"/>
                    
                    <Button class="btn btn-danger btn-delete" @onclick="@(()=> RemoveItemFormCart(@product))">Remove</Button>
                </div>
                <div class="cart-product-price">$@(product.Price * product.Quantity)</div>
            </div>
            
            
        }
        <div class="summary-price">Total count is (@CartProducts.Sum(s => s.Quantity)) and sum = (@CartProducts.Sum(s => s.Price * s.Quantity))</div>
    </div>
}


@code {

    List<CartProductResponceDto> CartProducts = new List<CartProductResponceDto>();
    
    string message = "cart items are loading";

    protected override async Task OnInitializedAsync()
    {
        await LoadCart();
    }

    private async Task RemoveItemFormCart(CartProductResponceDto product)
    {
        await CartService.RemoveProductFromCart(product.ProductId, product.ProductTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        var result = await CartService.GetCartItems();
        if (result.Count == 0)
        {
            message = "Your cart is empty";
            CartProducts = new List<CartProductResponceDto>();
        }
        else
        {
            var cart = await CartService.GetCartProducts();
            CartProducts = new List<CartProductResponceDto>();
            CartProducts.AddRange(cart);
            
            message = $"Total items in your cart= {cart.Count}";
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartProductResponceDto product)
    {
        product.Quantity = (int) int.Parse(e.Value.ToString());
        if (product.Quantity < 1) 
            product.Quantity = 1;

        await CartService.UpdateQuentity(product);
    }

}