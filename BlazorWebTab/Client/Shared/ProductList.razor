@implements IDisposable;

@inject IProductService ProductService;

@if (ProductService.Products.Count == 0)
{
    <span>@ProductService.Message</span>
}
else
{
    <h3>Products: @ProductService.Products.Count</h3>
    <ul class="list-unstyled">
        @foreach (var product in ProductService.Products)
        {
            <li class="media my-3">
                <div class="media-img-wrapper mr-2">
                    <a href="/product/@product.Id">
                        <img class="media-img" src="@product.ImageUrl" alt="@product.Title"/>
                    </a>
                </div>
                <div class="media-body">
                    <a href="/product/@product.Id">
                        <h4 class="mb-0">@product.Title</h4>
                    </a>
                    <p>@product.Description</p>
                    <h5 class="price">@ShowPriceOfProduct(product)</h5>
                </div>
            </li>
        }
    </ul>

 
    for (var i = 1; i <= ProductService.PageCount; i++)
    {
        <a class="btn @(i == ProductService.CurrentPage ? "btn-info" : "btn-outline-info") page-selection" href="/search/@ProductService.LastSearchText/@i">@i</a>
    }
}

@code
{
    protected override void OnInitialized()
    {
        ProductService.ProductChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductChanged -= StateHasChanged;
    }

    private string ShowPriceOfProduct(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0)
        {
            return "No price set";
        }
        return $"Price is between {product.Variants.Min(s => s.Price)} - {product.Variants.Max(s => s.Price)}";
    }
}