@inject IProductService ProductService
@implements IDisposable

<div style="text-align: center;">
    <h2>Top of products today</h2>
</div>
@if (ProductService.Products == null || ProductService.Products.Count == 0)
{
    <span>@ProductService.Message</span>
}
else
{
    <div class="container">
        @foreach (var product in ProductService.Products.Where(s => s.Featured))
        {
            <div class="featured-product">
                <div>
                    <a href="product/@product.Id">
                        <img src="@product.ImageUrl"/>
                    </a>
                </div>
                <h6>
                    <a href="product/@product.Id">@product.Title</a>
                </h6>
                @if (product.Variants != null && product.Variants.Count > 0)
                {
                    <h5 class="price">
                        @product.Variants[0].Price $
                    </h5>
                }
            </div>
        }
    </div>
}


@code {

    protected override void OnInitialized()
    {
        ProductService.ProductChanged += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.ProductChanged -= StateHasChanged;
    }

}